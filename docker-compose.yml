version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cybersec-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: cybersec123
      MONGO_INITDB_DATABASE: cybersec_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cybersec-network

  # Redis Cache & Queue
  redis:
    image: redis:7.2-alpine
    container_name: cybersec-redis
    restart: unless-stopped
    command: redis-server --requirepass cybersec123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cybersec-network

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: cybersec-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:cybersec123@mongodb:27017/cybersec_platform?authSource=admin
      REDIS_URL: redis://:cybersec123@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      ML_SERVICE_URL: http://ml-service:8000
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML/AI Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cybersec-ml
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      REDIS_URL: redis://:cybersec123@redis:6379
      MONGODB_URI: mongodb://admin:cybersec123@mongodb:27017/cybersec_platform?authSource=admin
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/data:/app/data
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:5000
        REACT_APP_ML_SERVICE_URL: http://localhost:8000
    container_name: cybersec-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: cybersec-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ml-service
    networks:
      - cybersec-network

  # Security Scanner Worker
  scanner:
    build:
      context: .
      dockerfile: shared/scanners/Dockerfile
    container_name: cybersec-scanner
    restart: unless-stopped
    environment:
      REDIS_URL: redis://:cybersec123@redis:6379
      MONGODB_URI: mongodb://admin:cybersec123@mongodb:27017/cybersec_platform?authSource=admin
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared/scanners:/app/scanners
      - ./logs:/app/logs
    networks:
      - cybersec-network
    privileged: true  # Required for network scanning tools

  # PDF Report Generator
  pdf-generator:
    build:
      context: ./shared/pdf_generator
      dockerfile: Dockerfile
    container_name: cybersec-pdf
    restart: unless-stopped
    environment:
      REDIS_URL: redis://:cybersec123@redis:6379
      MONGODB_URI: mongodb://admin:cybersec123@mongodb:27017/cybersec_platform?authSource=admin
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./reports:/app/reports
      - ./shared/pdf_generator/templates:/app/templates
    networks:
      - cybersec-network

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: cybersec-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cybersec-network

  grafana:
    image: grafana/grafana:latest
    container_name: cybersec-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: cybersec123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cybersec-network

  # Log Aggregation
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: cybersec-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cybersec-network

  logstash:
    image: logstash:8.11.0
    container_name: cybersec-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    networks:
      - cybersec-network

  kibana:
    image: kibana:8.11.0
    container_name: cybersec-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - cybersec-network

  # Background Job Processor
  job-processor:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: cybersec-jobs
    restart: unless-stopped
    command: node src/workers/jobProcessor.js
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:cybersec123@mongodb:27017/cybersec_platform?authSource=admin
      REDIS_URL: redis://:cybersec123@redis:6379
      ML_SERVICE_URL: http://ml-service:8000
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - cybersec-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  cybersec-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16